name: Real Estate CI/CD

on:
  push:
    branches: ['main', 'develop', 'feature/initial-setup']
  pull_request:
    branches: ['main']

permissions:
  contents: read
  security-events: write
  actions: read
  deployments: write
  packages: write

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Run Prettier check
        run: npx prettier --check .
      - name: Type checking
        run: npx tsc --noEmit
      - name: Security audit
        run: npm audit --audit-level=high

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

  build-test:
    needs: [quality-check, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test -- --passWithNoTests

      - name: Verify build output
        run: ls -la .next/

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/initial-setup'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker service
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER

      - name: Set up Docker Buildx
        run: |
          sudo docker buildx create --name mybuilder --use
          sudo docker buildx inspect --bootstrap

      - name: Log in to Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          TAG="${{ env.REGISTRY }}/$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]'):${{ github.ref_name }}"
          sudo docker buildx build \
            --platform linux/amd64 \
            --push \
            --build-arg NEXT_TELEMETRY_DISABLED=1 \
            --tag "$TAG" \
            .

      - name: Test Docker image from registry
        run: |
          TAG="${{ env.REGISTRY }}/$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]'):${{ github.ref_name }}"
          sudo docker rmi "$TAG" || true
          sudo docker pull "$TAG"
          sudo docker run --rm -d -p 3000:3000 --name test-app "$TAG"
          sleep 10
          curl -f http://localhost:3000 || exit 1
          sudo docker stop test-app

  deploy-staging:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # kubectl apply commands would go here
